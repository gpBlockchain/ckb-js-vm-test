import * as bindings from "@ckb-js-std/bindings";
import {log, HighLevel, Script, hashTypeFrom, Transaction, WitnessArgs} from "@ckb-js-std/core";
import {hex} from "@ckb-js-std/bindings";

declare global {
    interface BigInt {
        toJSON(): number;
    }
}

// 实现 toJSON 方法
BigInt.prototype.toJSON = function (): number {
    return Number(this);
};

function main() {
    log.setLevel(log.LogLevel.Debug);
    // HighLevel.loadScript();
    let scriptHex = bindings.loadScript();
    let script = HighLevel.loadScript();
    console.log(`scriptHex:${JSON.stringify(scriptHex)}`);
    console.log(`script:${JSON.stringify(script)}`);
    let fromScript = Script.fromBytes(hex.decode("780000001000000030000000310000000eba4d7c6186cc93749b6bfb7669055a9a9d8e45c1eca5228b7a78e58a36815604430000000000cad25c217617c7007ab35dcbe827b8e93e0e03b556764646f12ef46a12324e5d040000000000000000000000000000000000000000000000000000000000000000"))
    console.assert(JSON.stringify(fromScript) == '{"codeHash":"0x0eba4d7c6186cc93749b6bfb7669055a9a9d8e45c1eca5228b7a78e58a368156","hashType":4,"args":"0x0000cad25c217617c7007ab35dcbe827b8e93e0e03b556764646f12ef46a12324e5d040000000000000000000000000000000000000000000000000000000000000000"}', "should be equal");
    let fromScript2 = Script.from({
        codeHash: hex.decode("0eba4d7c6186cc93749b6bfb7669055a9a9d8e45c1eca5228b7a78e58a368156"),
        hashType: 4,
        args: hex.decode("0000cad25c217617c7007ab35dcbe827b8e93e0e03b556764646f12ef46a12324e5d040000000000000000000000000000000000000000000000000000000000000000")
    });
    console.assert(JSON.stringify(fromScript2) == '{"codeHash":"0x0eba4d7c6186cc93749b6bfb7669055a9a9d8e45c1eca5228b7a78e58a368156","hashType":4,"args":"0x0000cad25c217617c7007ab35dcbe827b8e93e0e03b556764646f12ef46a12324e5d040000000000000000000000000000000000000000000000000000000000000000"}', "should be equal");

    let err = true;
    //hashTypeFrom 非法type
    try {
        hashTypeFrom(0x05);
        err = false;
    } catch (e) {
    }
    console.assert(err, "should throw error");

    // tx https://explorer.nervos.org/transaction/0xeb64c12196a6b637038a4adf07f3f86a32d33aaad54c37934b2920000e007201

    let fromTx = Transaction.fromBytes(hex.decode("830300000c000000f2020000e60200001c0000002000000093000000970000001f010000be0200000000000003000000ae3197c306c0d0b36722773cff7dafcc8e312154826f876cec4bd94d24dc61b300000000003ba4c4b6cb70fd332d0159fa1c2ce021b361b7ccfe1acf2c44ad4902b1c905a5000000000071a7ba8fc96349fea0ed3a5c47992e3b4084b031a42264a018e0072e8172e46c000000000100000000030000000000000000000000ae53c8b91e93f0e45feef63aad6856786e182c536ea224e21736bfb27108d26e000000000000000000000000f3adb16dc688a9efbfcf1fb3c2e24ae166e69e5a06a3dfbfebe587dd674ee8ba01000000000000000000000077d98b3ee1d4281f340a5e10e7acefdb677ba8cf0b94c441749b987ecd5bd73d020000009f01000010000000a70000003e0100009700000010000000180000006100000000902f5009000000490000001000000030000000310000009bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce80114000000c45a83ea851eae30307ff47918ca3d2dabca7e52360000001000000030000000310000003a468d53352eb855521dabed0dc7036929bfe72766ad58f801edfbae564f7b430101000000009700000010000000180000006100000000902f5009000000490000001000000030000000310000009bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce80114000000c45a83ea851eae30307ff47918ca3d2dabca7e52360000001000000030000000310000009e537bf5b8ec044ca3f53355e879f3fd8832217e4a9b41d9994cf0c547241a7901010000000061000000100000001800000061000000782aacdf21000000490000001000000030000000310000009bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce80114000000c45a83ea851eae30307ff47918ca3d2dabca7e522800000010000000160000002400000002000000080c0a00000008000000000000001744000000009100000010000000690000007d000000550000005500000010000000550000005500000041000000baa63e5503996e76f85d33307f465ed193cffdf844aaf9b3188313487d4f657e49b1fc25b77b1971893ca968eb11aafd11c6911f77b5f85511a32df61d75090a0110000000100000001000000010000000100000001000000010000000100000001000000010000000"));
    console.log(`fromTx:${JSON.stringify(fromTx)}`);
    console.assert(JSON.stringify(fromTx) == '{"version":0,"cellDeps":[{"outPoint":{"txHash":"0xae3197c306c0d0b36722773cff7dafcc8e312154826f876cec4bd94d24dc61b3","index":0},"depType":0},{"outPoint":{"txHash":"0x3ba4c4b6cb70fd332d0159fa1c2ce021b361b7ccfe1acf2c44ad4902b1c905a5","index":0},"depType":0},{"outPoint":{"txHash":"0x71a7ba8fc96349fea0ed3a5c47992e3b4084b031a42264a018e0072e8172e46c","index":0},"depType":1}],"headerDeps":[],"inputs":[{"previousOutput":{"txHash":"0xae53c8b91e93f0e45feef63aad6856786e182c536ea224e21736bfb27108d26e","index":0},"since":0},{"previousOutput":{"txHash":"0xf3adb16dc688a9efbfcf1fb3c2e24ae166e69e5a06a3dfbfebe587dd674ee8ba","index":1},"since":0},{"previousOutput":{"txHash":"0x77d98b3ee1d4281f340a5e10e7acefdb677ba8cf0b94c441749b987ecd5bd73d","index":2},"since":0}],"outputs":[{"capacity":40000000000,"lock":{"codeHash":"0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8","hashType":1,"args":"0xc45a83ea851eae30307ff47918ca3d2dabca7e52"},"type":{"codeHash":"0x3a468d53352eb855521dabed0dc7036929bfe72766ad58f801edfbae564f7b43","hashType":1,"args":"0x00"}},{"capacity":40000000000,"lock":{"codeHash":"0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8","hashType":1,"args":"0xc45a83ea851eae30307ff47918ca3d2dabca7e52"},"type":{"codeHash":"0x9e537bf5b8ec044ca3f53355e879f3fd8832217e4a9b41d9994cf0c547241a79","hashType":1,"args":"0x00"}},{"capacity":145486523000,"lock":{"codeHash":"0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8","hashType":1,"args":"0xc45a83ea851eae30307ff47918ca3d2dabca7e52"}}],"outputsData":["0x080c","0x08000000000000001744","0x"],"witnesses":["0x5500000010000000550000005500000041000000baa63e5503996e76f85d33307f465ed193cffdf844aaf9b3188313487d4f657e49b1fc25b77b1971893ca968eb11aafd11c6911f77b5f85511a32df61d75090a01","0x10000000100000001000000010000000","0x10000000100000001000000010000000"]}', "should be equal");
    let witness0 = WitnessArgs.fromBytes(fromTx.witnesses[0]);
    console.log(`witness0:${JSON.stringify(witness0)}`);
    console.assert(JSON.stringify(witness0) == '{"lock":"0xbaa63e5503996e76f85d33307f465ed193cffdf844aaf9b3188313487d4f657e49b1fc25b77b1971893ca968eb11aafd11c6911f77b5f85511a32df61d75090a01"}', "should be equal");
    return 0;
}

bindings.exit(main());
